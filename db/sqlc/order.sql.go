// Code generated by sqlc. DO NOT EDIT.
// source: order.sql

package db

import (
	"context"
	"time"

	"github.com/google/uuid"
)

const getorder = `-- name: Getorder :one
SELECT
    id, identifier, recieved_date, delivery_date, client_id, created_at
FROM
    orders
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) Getorder(ctx context.Context, id uuid.UUID) (Order, error) {
	row := q.db.QueryRowContext(ctx, getorder, id)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.RecievedDate,
		&i.DeliveryDate,
		&i.ClientID,
		&i.CreatedAt,
	)
	return i, err
}

const listOrders = `-- name: ListOrders :many
SELECT
    id, identifier, recieved_date, delivery_date, client_id, created_at
FROM
    orders
ORDER BY
    name
LIMIT
    $1 OFFSET $2
`

type ListOrdersParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListOrders(ctx context.Context, arg ListOrdersParams) ([]Order, error) {
	rows, err := q.db.QueryContext(ctx, listOrders, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Order
	for rows.Next() {
		var i Order
		if err := rows.Scan(
			&i.ID,
			&i.Identifier,
			&i.RecievedDate,
			&i.DeliveryDate,
			&i.ClientID,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createOrder = `-- name: createOrder :one
INSERT INTO
    orders (
        id,
        identifier,
        recieved_date,
        delivery_date,
        client_id,
        created_at
    )
VALUES
    ($1, $2, $3, $4, $5, $6) RETURNING id, identifier, recieved_date, delivery_date, client_id, created_at
`

type createOrderParams struct {
	ID           uuid.UUID `json:"id"`
	Identifier   int32     `json:"identifier"`
	RecievedDate time.Time `json:"recieved_date"`
	DeliveryDate time.Time `json:"delivery_date"`
	ClientID     uuid.UUID `json:"client_id"`
	CreatedAt    time.Time `json:"created_at"`
}

func (q *Queries) createOrder(ctx context.Context, arg createOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, createOrder,
		arg.ID,
		arg.Identifier,
		arg.RecievedDate,
		arg.DeliveryDate,
		arg.ClientID,
		arg.CreatedAt,
	)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.RecievedDate,
		&i.DeliveryDate,
		&i.ClientID,
		&i.CreatedAt,
	)
	return i, err
}

const deleteOrder = `-- name: deleteOrder :exec
DELETE
FROM
    orders
WHERE id = $1
`

func (q *Queries) deleteOrder(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteOrder, id)
	return err
}

const updateOrder = `-- name: updateOrder :one
UPDATE
    orders
SET
    recieved_date = $2,
    delivery_date = $3
WHERE
    id = $1
RETURNING id, identifier, recieved_date, delivery_date, client_id, created_at
`

type updateOrderParams struct {
	ID           uuid.UUID `json:"id"`
	RecievedDate time.Time `json:"recieved_date"`
	DeliveryDate time.Time `json:"delivery_date"`
}

func (q *Queries) updateOrder(ctx context.Context, arg updateOrderParams) (Order, error) {
	row := q.db.QueryRowContext(ctx, updateOrder, arg.ID, arg.RecievedDate, arg.DeliveryDate)
	var i Order
	err := row.Scan(
		&i.ID,
		&i.Identifier,
		&i.RecievedDate,
		&i.DeliveryDate,
		&i.ClientID,
		&i.CreatedAt,
	)
	return i, err
}
