// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: garment.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createGarment = `-- name: CreateGarment :one
INSERT INTO
    garments (
        id,
        order_id,
        cuantity,
        category,
        gendre,
        color,
        brand,
        price,
        comment,
        defects
    )
VALUES
    ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10) RETURNING id, order_id, cuantity, category, gendre, color, brand, price, comment, defects, created_at
`

type CreateGarmentParams struct {
	ID       uuid.UUID `json:"id"`
	OrderID  uuid.UUID `json:"order_id"`
	Cuantity string    `json:"cuantity"`
	Category string    `json:"category"`
	Gendre   string    `json:"gendre"`
	Color    string    `json:"color"`
	Brand    string    `json:"brand"`
	Price    string    `json:"price"`
	Comment  string    `json:"comment"`
	Defects  string    `json:"defects"`
}

func (q *Queries) CreateGarment(ctx context.Context, arg CreateGarmentParams) (Garment, error) {
	row := q.db.QueryRowContext(ctx, createGarment,
		arg.ID,
		arg.OrderID,
		arg.Cuantity,
		arg.Category,
		arg.Gendre,
		arg.Color,
		arg.Brand,
		arg.Price,
		arg.Comment,
		arg.Defects,
	)
	var i Garment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Cuantity,
		&i.Category,
		&i.Gendre,
		&i.Color,
		&i.Brand,
		&i.Price,
		&i.Comment,
		&i.Defects,
		&i.CreatedAt,
	)
	return i, err
}

const deleteGarment = `-- name: DeleteGarment :exec
DELETE
FROM
    orders
WHERE id = $1
`

func (q *Queries) DeleteGarment(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteGarment, id)
	return err
}

const getGarment = `-- name: GetGarment :one
SELECT
    id, order_id, cuantity, category, gendre, color, brand, price, comment, defects, created_at
FROM
    garments
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetGarment(ctx context.Context, id uuid.UUID) (Garment, error) {
	row := q.db.QueryRowContext(ctx, getGarment, id)
	var i Garment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Cuantity,
		&i.Category,
		&i.Gendre,
		&i.Color,
		&i.Brand,
		&i.Price,
		&i.Comment,
		&i.Defects,
		&i.CreatedAt,
	)
	return i, err
}

const listGarmentsByOrder = `-- name: ListGarmentsByOrder :many
SELECT
    id, order_id, cuantity, category, gendre, color, brand, price, comment, defects, created_at
FROM
    garments
WHERE 
    order_id = $1
ORDER BY
    created_at
`

func (q *Queries) ListGarmentsByOrder(ctx context.Context, orderID uuid.UUID) ([]Garment, error) {
	rows, err := q.db.QueryContext(ctx, listGarmentsByOrder, orderID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Garment
	for rows.Next() {
		var i Garment
		if err := rows.Scan(
			&i.ID,
			&i.OrderID,
			&i.Cuantity,
			&i.Category,
			&i.Gendre,
			&i.Color,
			&i.Brand,
			&i.Price,
			&i.Comment,
			&i.Defects,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateGarment = `-- name: UpdateGarment :one
UPDATE
    garments
SET
    cuantity = $2,
    category = $3,
    gendre = $4,
    color = $5,
    brand = $6,
    price = $7,
    comment = $8,
    defects = $9
WHERE
    id = $1
RETURNING id, order_id, cuantity, category, gendre, color, brand, price, comment, defects, created_at
`

type UpdateGarmentParams struct {
	ID       uuid.UUID `json:"id"`
	Cuantity string    `json:"cuantity"`
	Category string    `json:"category"`
	Gendre   string    `json:"gendre"`
	Color    string    `json:"color"`
	Brand    string    `json:"brand"`
	Price    string    `json:"price"`
	Comment  string    `json:"comment"`
	Defects  string    `json:"defects"`
}

func (q *Queries) UpdateGarment(ctx context.Context, arg UpdateGarmentParams) (Garment, error) {
	row := q.db.QueryRowContext(ctx, updateGarment,
		arg.ID,
		arg.Cuantity,
		arg.Category,
		arg.Gendre,
		arg.Color,
		arg.Brand,
		arg.Price,
		arg.Comment,
		arg.Defects,
	)
	var i Garment
	err := row.Scan(
		&i.ID,
		&i.OrderID,
		&i.Cuantity,
		&i.Category,
		&i.Gendre,
		&i.Color,
		&i.Brand,
		&i.Price,
		&i.Comment,
		&i.Defects,
		&i.CreatedAt,
	)
	return i, err
}
