// Code generated by sqlc. DO NOT EDIT.
// source: client.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const getClient = `-- name: GetClient :one
SELECT
    id, name, phone, address
FROM
    clients
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetClient(ctx context.Context, id uuid.UUID) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const listClients = `-- name: ListClients :many
SELECT
    id, name, phone, address
FROM
    clients
ORDER BY
    name
LIMIT
    $1 OFFSET $2
`

type ListClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClients(ctx context.Context, arg ListClientsParams) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Phone,
			&i.Address,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const createClient = `-- name: createClient :one
INSERT INTO
    clients (
        id,
        name,
        phone,
        address
    )
VALUES
    ($1, $2, $3, $4) RETURNING id, name, phone, address
`

type createClientParams struct {
	ID      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	Phone   string    `json:"phone"`
	Address string    `json:"address"`
}

func (q *Queries) createClient(ctx context.Context, arg createClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Address,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Address,
	)
	return i, err
}

const deleteClient = `-- name: deleteClient :exec
DELETE
FROM
    clients
WHERE id = $1
`

func (q *Queries) deleteClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const updateClient = `-- name: updateClient :one
UPDATE
    clients
SET
    name = $2,
    phone = $3,
    address = $4
WHERE
    id = $1
RETURNING id, name, phone, address
`

type updateClientParams struct {
	ID      uuid.UUID `json:"id"`
	Name    string    `json:"name"`
	Phone   string    `json:"phone"`
	Address string    `json:"address"`
}

func (q *Queries) updateClient(ctx context.Context, arg updateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ID,
		arg.Name,
		arg.Phone,
		arg.Address,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Phone,
		&i.Address,
	)
	return i, err
}
