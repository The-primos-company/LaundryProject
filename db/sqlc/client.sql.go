// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.14.0
// source: client.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createClient = `-- name: CreateClient :one
INSERT INTO
    clients (
        id,
        name,
        identification,
        address,
        phone,
        email
    )
VALUES
    ($1, $2, $3, $4, $5, $6) RETURNING id, name, identification, address, phone, email, created_at
`

type CreateClientParams struct {
	ID             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	Identification string    `json:"identification"`
	Address        string    `json:"address"`
	Phone          string    `json:"phone"`
	Email          string    `json:"email"`
}

func (q *Queries) CreateClient(ctx context.Context, arg CreateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, createClient,
		arg.ID,
		arg.Name,
		arg.Identification,
		arg.Address,
		arg.Phone,
		arg.Email,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Identification,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const deleteClient = `-- name: DeleteClient :exec
DELETE
FROM
    clients
WHERE id = $1
`

func (q *Queries) DeleteClient(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteClient, id)
	return err
}

const getClient = `-- name: GetClient :one
SELECT
    id, name, identification, address, phone, email, created_at
FROM
    clients
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetClient(ctx context.Context, id uuid.UUID) (Client, error) {
	row := q.db.QueryRowContext(ctx, getClient, id)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Identification,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}

const getClientByIdentification = `-- name: GetClientByIdentification :many
SELECT 
    id, name, identification, address, phone, email, created_at
FROM 
    clients
WHERE 
    identification = $1
ORDER BY
    created_at
    DESC
LIMIT
    $2
OFFSET $3
`

type GetClientByIdentificationParams struct {
	Identification string `json:"identification"`
	Limit          int32  `json:"limit"`
	Offset         int32  `json:"offset"`
}

func (q *Queries) GetClientByIdentification(ctx context.Context, arg GetClientByIdentificationParams) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, getClientByIdentification, arg.Identification, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Identification,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getClientByName = `-- name: GetClientByName :many
SELECT 
    id, name, identification, address, phone, email, created_at
FROM 
    clients
WHERE 
    name ~* $1
ORDER BY
    created_at
    DESC
LIMIT
    $2 
OFFSET $3
`

type GetClientByNameParams struct {
	Name   string `json:"name"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

func (q *Queries) GetClientByName(ctx context.Context, arg GetClientByNameParams) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, getClientByName, arg.Name, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Identification,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClients = `-- name: ListClients :many
SELECT
    id, name, identification, address, phone, email, created_at
FROM
    clients
ORDER BY
    created_at
DESC
LIMIT
    $1 OFFSET $2
`

type ListClientsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListClients(ctx context.Context, arg ListClientsParams) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClients, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Identification,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listClientsAll = `-- name: ListClientsAll :many
SELECT
    id, name, identification, address, phone, email, created_at
FROM
    clients
ORDER BY
    created_at
DESC
`

func (q *Queries) ListClientsAll(ctx context.Context) ([]Client, error) {
	rows, err := q.db.QueryContext(ctx, listClientsAll)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Client
	for rows.Next() {
		var i Client
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Identification,
			&i.Address,
			&i.Phone,
			&i.Email,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateClient = `-- name: UpdateClient :one
UPDATE
    clients
SET
    name = $2,
    identification = $3,
    address = $4,
    phone = $5,
    email = $6
WHERE
    id = $1
RETURNING id, name, identification, address, phone, email, created_at
`

type UpdateClientParams struct {
	ID             uuid.UUID `json:"id"`
	Name           string    `json:"name"`
	Identification string    `json:"identification"`
	Address        string    `json:"address"`
	Phone          string    `json:"phone"`
	Email          string    `json:"email"`
}

func (q *Queries) UpdateClient(ctx context.Context, arg UpdateClientParams) (Client, error) {
	row := q.db.QueryRowContext(ctx, updateClient,
		arg.ID,
		arg.Name,
		arg.Identification,
		arg.Address,
		arg.Phone,
		arg.Email,
	)
	var i Client
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Identification,
		&i.Address,
		&i.Phone,
		&i.Email,
		&i.CreatedAt,
	)
	return i, err
}
