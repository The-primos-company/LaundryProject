// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.13.0
// source: price.sql

package db

import (
	"context"

	"github.com/google/uuid"
)

const createPrice = `-- name: CreatePrice :one
INSERT INTO
    prices (
        id,
        category,
        price_washing,
        price_ironing
    )
VALUES
    ($1, $2, $3, $4) RETURNING id, category, price_washing, price_ironing, created_at
`

type CreatePriceParams struct {
	ID           uuid.UUID `json:"id"`
	Category     string    `json:"category"`
	PriceWashing string    `json:"price_washing"`
	PriceIroning string    `json:"price_ironing"`
}

func (q *Queries) CreatePrice(ctx context.Context, arg CreatePriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, createPrice,
		arg.ID,
		arg.Category,
		arg.PriceWashing,
		arg.PriceIroning,
	)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.PriceWashing,
		&i.PriceIroning,
		&i.CreatedAt,
	)
	return i, err
}

const deletePrice = `-- name: DeletePrice :exec
DELETE
FROM
    prices
WHERE id = $1
`

func (q *Queries) DeletePrice(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deletePrice, id)
	return err
}

const getPrice = `-- name: GetPrice :one
SELECT
    id, category, price_washing, price_ironing, created_at
FROM
    prices
WHERE
    id = $1
LIMIT
    1
`

func (q *Queries) GetPrice(ctx context.Context, id uuid.UUID) (Price, error) {
	row := q.db.QueryRowContext(ctx, getPrice, id)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.PriceWashing,
		&i.PriceIroning,
		&i.CreatedAt,
	)
	return i, err
}

const listPrices = `-- name: ListPrices :many
SELECT
    id, category, price_washing, price_ironing, created_at
FROM
    prices
ORDER BY
    category
ASC
LIMIT
    $1 OFFSET $2
`

type ListPricesParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListPrices(ctx context.Context, arg ListPricesParams) ([]Price, error) {
	rows, err := q.db.QueryContext(ctx, listPrices, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Price
	for rows.Next() {
		var i Price
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.PriceWashing,
			&i.PriceIroning,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listPricesByCategory = `-- name: ListPricesByCategory :many
SELECT
    id, category, price_washing, price_ironing, created_at
FROM
    prices
WHERE 
    category ~* $3
ORDER BY
    category
ASC
LIMIT
    $1 OFFSET $2
`

type ListPricesByCategoryParams struct {
	Limit    int32  `json:"limit"`
	Offset   int32  `json:"offset"`
	Category string `json:"category"`
}

func (q *Queries) ListPricesByCategory(ctx context.Context, arg ListPricesByCategoryParams) ([]Price, error) {
	rows, err := q.db.QueryContext(ctx, listPricesByCategory, arg.Limit, arg.Offset, arg.Category)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	var items []Price
	for rows.Next() {
		var i Price
		if err := rows.Scan(
			&i.ID,
			&i.Category,
			&i.PriceWashing,
			&i.PriceIroning,
			&i.CreatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updatePrice = `-- name: UpdatePrice :one
UPDATE
    prices
SET
    category = $2,
    price_washing = $3,
    price_ironing = $4
WHERE
    id = $1
RETURNING id, category, price_washing, price_ironing, created_at
`

type UpdatePriceParams struct {
	ID           uuid.UUID `json:"id"`
	Category     string    `json:"category"`
	PriceWashing string    `json:"price_washing"`
	PriceIroning string    `json:"price_ironing"`
}

func (q *Queries) UpdatePrice(ctx context.Context, arg UpdatePriceParams) (Price, error) {
	row := q.db.QueryRowContext(ctx, updatePrice,
		arg.ID,
		arg.Category,
		arg.PriceWashing,
		arg.PriceIroning,
	)
	var i Price
	err := row.Scan(
		&i.ID,
		&i.Category,
		&i.PriceWashing,
		&i.PriceIroning,
		&i.CreatedAt,
	)
	return i, err
}
